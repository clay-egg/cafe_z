// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;
import 'package:flutter_dotenv/flutter_dotenv.dart';

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// await dotenv.load(); // Load environment variables
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    // Load environment variables
    dotenv.load();
    
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static FirebaseOptions get web => FirebaseOptions(
    apiKey: dotenv.get('FIREBASE_WEB_API_KEY'),
    appId: dotenv.get('FIREBASE_WEB_APP_ID'),
    messagingSenderId: dotenv.get('FIREBASE_WEB_MESSAGING_SENDER_ID'),
    projectId: dotenv.get('FIREBASE_WEB_PROJECT_ID'),
    authDomain: dotenv.get('FIREBASE_WEB_AUTH_DOMAIN'),
    databaseURL: dotenv.get('FIREBASE_WEB_DATABASE_URL'),
    storageBucket: dotenv.get('FIREBASE_WEB_STORAGE_BUCKET'),
    measurementId: dotenv.get('FIREBASE_WEB_MEASUREMENT_ID'),
  );

  static FirebaseOptions get android => FirebaseOptions(
    apiKey: dotenv.get('FIREBASE_ANDROID_API_KEY'),
    appId: dotenv.get('FIREBASE_ANDROID_APP_ID'),
    messagingSenderId: dotenv.get('FIREBASE_ANDROID_MESSAGING_SENDER_ID'),
    projectId: dotenv.get('FIREBASE_ANDROID_PROJECT_ID'),
    databaseURL: dotenv.get('FIREBASE_ANDROID_DATABASE_URL'),
    storageBucket: dotenv.get('FIREBASE_ANDROID_STORAGE_BUCKET'),
  );

  static FirebaseOptions get ios => FirebaseOptions(
    apiKey: dotenv.get('FIREBASE_IOS_API_KEY'),
    appId: dotenv.get('FIREBASE_IOS_APP_ID'),
    messagingSenderId: dotenv.get('FIREBASE_IOS_MESSAGING_SENDER_ID'),
    projectId: dotenv.get('FIREBASE_IOS_PROJECT_ID'),
    databaseURL: dotenv.get('FIREBASE_IOS_DATABASE_URL'),
    storageBucket: dotenv.get('FIREBASE_IOS_STORAGE_BUCKET'),
    iosBundleId: dotenv.get('FIREBASE_IOS_BUNDLE_ID'),
  );

  static FirebaseOptions get macos => FirebaseOptions(
    apiKey: dotenv.get('FIREBASE_IOS_API_KEY'),
    appId: '1:442439926476:ios:2d95e4d22ac3765a173869', // Different from iOS app ID
    messagingSenderId: dotenv.get('FIREBASE_IOS_MESSAGING_SENDER_ID'),
    projectId: dotenv.get('FIREBASE_IOS_PROJECT_ID'),
    databaseURL: dotenv.get('FIREBASE_IOS_DATABASE_URL'),
    storageBucket: dotenv.get('FIREBASE_IOS_STORAGE_BUCKET'),
    iosBundleId: '${dotenv.get('FIREBASE_IOS_BUNDLE_ID')}.RunnerTests',
  );
}
